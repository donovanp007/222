# AI Medical Scribe - Development Docker Compose
# For local development with hot reload and debugging

version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps  # Use deps stage for development
    container_name: ai-medic-scribe-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugging port
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules
      - /app/.next
      # Mount data directories
      - mediscribe_data:/app/data
      - mediscribe_logs:/app/logs
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
      - PORT=3000
      - HOSTNAME=0.0.0.0
    command: npm run dev
    restart: unless-stopped
    networks:
      - mediscribe-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mediscribe-dev.rule=Host(`localhost`)"
      - "traefik.http.services.mediscribe-dev.loadbalancer.server.port=3000"

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: ai-medic-scribe-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - mediscribe-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional for development)
  nginx:
    image: nginx:alpine
    container_name: ai-medic-scribe-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - mediscribe-network

  # PostgreSQL database (for future use)
  postgres:
    image: postgres:15-alpine
    container_name: ai-medic-scribe-postgres-dev
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mediscribe_dev
      POSTGRES_USER: mediscribe
      POSTGRES_PASSWORD: dev_password_change_in_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - mediscribe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mediscribe"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog
    container_name: ai-medic-scribe-mailhog-dev
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    restart: unless-stopped
    networks:
      - mediscribe-network

  # MinIO for file storage (S3-compatible)
  minio:
    image: minio/minio
    container_name: ai-medic-scribe-minio-dev
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: mediscribe
      MINIO_ROOT_PASSWORD: dev_password_change_in_production
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - mediscribe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  mediscribe_data:
    driver: local
  mediscribe_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  mediscribe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16